void zones() {
// example of script showing how to divide a canvas
// into adjacent subpads + axis labels on the top and right side
// of the pads.
//Author; Rene Brun

     
   TH1F *h_delta_t__0 = new TH1F("h_delta_t__0","time",100,35,60);
   h_delta_t__0->SetBinContent(0,3);
   h_delta_t__0->SetBinContent(7,1);
   h_delta_t__0->SetBinContent(17,1);
   h_delta_t__0->SetBinContent(20,1);
   h_delta_t__0->SetBinContent(21,1);
   h_delta_t__0->SetBinContent(24,2);
   h_delta_t__0->SetBinContent(25,3);
   h_delta_t__0->SetBinContent(26,1);
   h_delta_t__0->SetBinContent(27,4);
   h_delta_t__0->SetBinContent(28,3);
   h_delta_t__0->SetBinContent(29,3);
   h_delta_t__0->SetBinContent(30,5);
   h_delta_t__0->SetBinContent(31,7);
   h_delta_t__0->SetBinContent(32,10);
   h_delta_t__0->SetBinContent(33,9);
   h_delta_t__0->SetBinContent(34,14);
   h_delta_t__0->SetBinContent(35,15);
   h_delta_t__0->SetBinContent(36,20);
   h_delta_t__0->SetBinContent(37,14);
   h_delta_t__0->SetBinContent(38,17);
   h_delta_t__0->SetBinContent(39,24);
   h_delta_t__0->SetBinContent(40,32);
   h_delta_t__0->SetBinContent(41,35);
   h_delta_t__0->SetBinContent(42,42);
   h_delta_t__0->SetBinContent(43,38);
   h_delta_t__0->SetBinContent(44,60);
   h_delta_t__0->SetBinContent(45,64);
   h_delta_t__0->SetBinContent(46,65);
   h_delta_t__0->SetBinContent(47,69);
   h_delta_t__0->SetBinContent(48,94);
   h_delta_t__0->SetBinContent(49,102);
   h_delta_t__0->SetBinContent(50,131);
   h_delta_t__0->SetBinContent(51,180);
   h_delta_t__0->SetBinContent(52,233);
   h_delta_t__0->SetBinContent(53,341);
   h_delta_t__0->SetBinContent(54,531);
   h_delta_t__0->SetBinContent(55,763);
   h_delta_t__0->SetBinContent(56,885);
   h_delta_t__0->SetBinContent(57,1210);
   h_delta_t__0->SetBinContent(58,1337);
   h_delta_t__0->SetBinContent(59,1389);
   h_delta_t__0->SetBinContent(60,1457);
   h_delta_t__0->SetBinContent(61,1423);
   h_delta_t__0->SetBinContent(62,1427);
   h_delta_t__0->SetBinContent(63,1283);
   h_delta_t__0->SetBinContent(64,1143);
   h_delta_t__0->SetBinContent(65,1027);
   h_delta_t__0->SetBinContent(66,939);
   h_delta_t__0->SetBinContent(67,731);
   h_delta_t__0->SetBinContent(68,563);
   h_delta_t__0->SetBinContent(69,493);
   h_delta_t__0->SetBinContent(70,408);
   h_delta_t__0->SetBinContent(71,357);
   h_delta_t__0->SetBinContent(72,268);
   h_delta_t__0->SetBinContent(73,173);
   h_delta_t__0->SetBinContent(74,155);
   h_delta_t__0->SetBinContent(75,127);
   h_delta_t__0->SetBinContent(76,79);
   h_delta_t__0->SetBinContent(77,53);
   h_delta_t__0->SetBinContent(78,47);
   h_delta_t__0->SetBinContent(79,33);
   h_delta_t__0->SetBinContent(80,19);
   h_delta_t__0->SetBinContent(81,10);
   h_delta_t__0->SetBinContent(82,8);
   h_delta_t__0->SetBinContent(83,3);
   h_delta_t__0->SetBinContent(84,4);
   h_delta_t__0->SetBinContent(85,3);
   h_delta_t__0->SetBinContent(86,3);
   h_delta_t__0->SetBinContent(87,2);
   h_delta_t__0->SetBinContent(88,1);
   h_delta_t__0->SetBinContent(90,2);
   h_delta_t__0->SetEntries(20000);

  TH1F *h_delta_t__3 = new TH1F("h_delta_t__3","time",100,35,60);
   h_delta_t__3->SetBinContent(0,2);
   h_delta_t__3->SetBinContent(8,1);
   h_delta_t__3->SetBinContent(11,1);
   h_delta_t__3->SetBinContent(17,2);
   h_delta_t__3->SetBinContent(18,2);
   h_delta_t__3->SetBinContent(19,1);
   h_delta_t__3->SetBinContent(20,2);
   h_delta_t__3->SetBinContent(21,3);
   h_delta_t__3->SetBinContent(22,2);
   h_delta_t__3->SetBinContent(23,4);
   h_delta_t__3->SetBinContent(24,5);
   h_delta_t__3->SetBinContent(25,4);
   h_delta_t__3->SetBinContent(26,4);
   h_delta_t__3->SetBinContent(27,19);
   h_delta_t__3->SetBinContent(28,13);
   h_delta_t__3->SetBinContent(29,15);
   h_delta_t__3->SetBinContent(30,18);
   h_delta_t__3->SetBinContent(31,24);
   h_delta_t__3->SetBinContent(32,28);
   h_delta_t__3->SetBinContent(33,16);
   h_delta_t__3->SetBinContent(34,28);
   h_delta_t__3->SetBinContent(35,37);
   h_delta_t__3->SetBinContent(36,37);
   h_delta_t__3->SetBinContent(37,55);
   h_delta_t__3->SetBinContent(38,64);
   h_delta_t__3->SetBinContent(39,73);
   h_delta_t__3->SetBinContent(40,84);
   h_delta_t__3->SetBinContent(41,111);
   h_delta_t__3->SetBinContent(42,149);
   h_delta_t__3->SetBinContent(43,202);
   h_delta_t__3->SetBinContent(44,242);
   h_delta_t__3->SetBinContent(45,343);
   h_delta_t__3->SetBinContent(46,482);
   h_delta_t__3->SetBinContent(47,704);
   h_delta_t__3->SetBinContent(48,957);
   h_delta_t__3->SetBinContent(49,1232);
   h_delta_t__3->SetBinContent(50,1441);
   h_delta_t__3->SetBinContent(51,1628);
   h_delta_t__3->SetBinContent(52,1738);
   h_delta_t__3->SetBinContent(53,1670);
   h_delta_t__3->SetBinContent(54,1498);
   h_delta_t__3->SetBinContent(55,1342);
   h_delta_t__3->SetBinContent(56,1112);
   h_delta_t__3->SetBinContent(57,922);
   h_delta_t__3->SetBinContent(58,801);
   h_delta_t__3->SetBinContent(59,577);
   h_delta_t__3->SetBinContent(60,503);
   h_delta_t__3->SetBinContent(61,415);
   h_delta_t__3->SetBinContent(62,342);
   h_delta_t__3->SetBinContent(63,239);
   h_delta_t__3->SetBinContent(64,193);
   h_delta_t__3->SetBinContent(65,153);
   h_delta_t__3->SetBinContent(66,135);
   h_delta_t__3->SetBinContent(67,101);
   h_delta_t__3->SetBinContent(68,68);
   h_delta_t__3->SetBinContent(69,56);
   h_delta_t__3->SetBinContent(70,31);
   h_delta_t__3->SetBinContent(71,25);
   h_delta_t__3->SetBinContent(72,8);
   h_delta_t__3->SetBinContent(73,9);
   h_delta_t__3->SetBinContent(74,6);
   h_delta_t__3->SetBinContent(75,4);
   h_delta_t__3->SetBinContent(76,1);
   h_delta_t__3->SetBinContent(77,1);
   h_delta_t__3->SetBinContent(78,3);
   h_delta_t__3->SetBinContent(79,1);
   h_delta_t__3->SetBinContent(80,1);
   h_delta_t__3->SetBinContent(81,1);
   h_delta_t__3->SetBinContent(82,1);
   h_delta_t__3->SetBinContent(83,1);
   h_delta_t__3->SetBinContent(91,1);
   h_delta_t__3->SetBinContent(93,1);
   h_delta_t__3->SetBinContent(101,5);
   h_delta_t__3->SetEntries(20000);
   

   
TCanvas *c_super = new TCanvas("c_super","comparing modes",100,100,600,700);
c_super->cd();
//c_super->Divide(1,3,1e-17,1e-17);

TPad *smallpad = new TPad("smallpad","",0.0,0.0,1,1);
//smallpad->SetFillStyle(4000);
smallpad->Draw();
smallpad->Divide(1,3,0,0);

    
 smallpad->cd(1);
 h_delta_t__0->Draw();
    
 
 smallpad->cd(2);
 h_delta_t__3->Draw();
 
 
 smallpad->cd(3);
 h_delta_t__0->Draw();


return 1;
}
